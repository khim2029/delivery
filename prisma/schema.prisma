datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String  @id @default(cuid())
  email String  @unique
  name  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  Vessel   Vessel[]
  Cargo    Cargo[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Vessel {
  id                 String   @id @default(cuid())
  vesselName         String
  imo                String
  departurePort      String
  arrivalPort        String
  departureTime      String
  arrivalTime        String
  voyageDistance     Int
  voyageState        String
  navigationalStatus String
  Cargo              Cargo?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             String
  vesselLocations    String
  presentLocation    String?
}

model Location {
  id        String   @id @default(cuid())
  longitude String
  latitude  String
  name      String
  port      String?
  slug      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cargo {
  id                    String   @id @default(cuid())
  sender                String
  senderAddress         String
  consignee             String
  consigneeAddress      String
  cargoName             String
  description           String
  quantity              Int
  note                  String
  vessel                Vessel   @relation(fields: [vesselId], references: [id], onDelete: Cascade)
  vesselId              String   @unique
  mmsi                  Int
  callSign              String
  flag                  String
  grossTonnage          Int
  summerDWT             Int
  length                Int
  breadth               Int
  yearBuilt             Int
  homePort              String
  classificationSociety String
  builder               String
  owner                 String
  manager               String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                String
}
